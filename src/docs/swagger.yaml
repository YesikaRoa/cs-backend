openapi: 3.0.0
info:
  title: API de Usuarios
  version: 1.0.0
  description: Documentación de la API REST con Swagger

servers:
  - url: http://localhost:3002/api

tags:
  - name: Auth
    description: Rutas de autenticación
  - name: Posts
    description: Publicaciones realizadas por los usuarios
  - name: Community
    description: Información general de la comunidad
  - name: Testimonies
    description: Testimonios de los usuarios
  - name: Users
    description: Gestión de usuarios
  - name: Dashboard
    description: Estadísticas y datos generales del sistema
  - name: PostsCategories
    description: Categorías de publicaciones

paths:
  /auth/register:
    post:
      summary: Registra un nuevo usuario
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        201:
          description: Usuario registrado correctamente
        409:
          description: Correo electrónico existente
        500:
          description: Error en el servidor

  /auth/login:
    post:
      summary: Inicia sesión
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: Login exitoso
        400:
          description: Credenciales inválidas

  /auth/profile:
    get:
      summary: Obtener perfil del usuario autenticado
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Datos del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: No autorizado (token faltante o inválido)

  /posts:
    post:
      summary: Crear un nuevo post
      tags: [Posts]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
      responses:
        201:
          description: Post creado exitosamente
        400:
          description: Datos inválidos
        401:
          description: No autorizado
    get:
      summary: Obtener todos los posts
      tags: [Posts]
      responses:
        200:
          description: Lista de posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        500:
          description: Error en el servidor

  /posts/{id}:
    get:
      summary: Obtener un post por ID
      tags: [Posts]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Post encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        404:
          description: Post no encontrado
    put:
      summary: Actualizar un post
      tags: [Posts]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
      responses:
        200:
          description: Post actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Datos inválidos
        401:
          description: No autorizado
        404:
          description: Post no encontrado
    delete:
      summary: Eliminar un post
      tags: [Posts]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Post eliminado exitosamente
        401:
          description: No autorizado
        404:
          description: Post no encontrado

  /communityInfo:
    get:
      summary: Obtener toda la información de la comunidad
      tags: [Community]
      responses:
        200:
          description: Lista de información de la comunidad
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommunityInfo'
    post:
      summary: Crear nueva información de la comunidad
      tags: [Community]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityInfoInput'
      responses:
        201:
          description: Información creada exitosamente

  /communityInfo/{id}:
    get:
      summary: Obtener información por ID
      tags: [Community]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Información encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityInfo'
        404:
          description: No encontrada
    put:
      summary: Actualizar información de comunidad
      tags: [Community]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityInfoInput'
      responses:
        200:
          description: Información actualizada
    delete:
      summary: Eliminar información de comunidad
      tags: [Community]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Eliminado exitosamente

  /testimonies:
    get:
      summary: Obtener todos los testimonios
      tags: [Testimonies]
      responses:
        200:
          description: Lista de testimonios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Testimony'
    post:
      summary: Crear un nuevo testimonio
      tags: [Testimonies]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestimonyInput'
      responses:
        201:
          description: Testimonio creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testimony'

  /testimonies/community/{communityId}:
    get:
      summary: Obtener testimonios por ID de comunidad
      tags: [Testimonies]
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Lista de testimonios de la comunidad
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Testimony'

  /testimonies/{id}:
    put:
      summary: Actualizar testimonio
      tags: [Testimonies]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestimonyInput'
      responses:
        200:
          description: Testimonio actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testimony'
    delete:
      summary: Eliminar testimonio
      tags: [Testimonies]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Testimonio eliminado

  /users:
    get:
      summary: Obtener todos los usuarios
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: No autorizado
    post:
      summary: Crear un nuevo usuario
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        201:
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Datos inválidos
        409:
          description: Correo electrónico existente
        401:
          description: No autorizado

  /users/{id}:
    get:
      summary: Obtener usuario por ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Usuario no encontrado
        401:
          description: No autorizado
    put:
      summary: Actualizar usuario
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        200:
          description: Usuario actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Datos inválidos
        404:
          description: Usuario no encontrado
        409:
          description: Correo electrónico existente
        401:
          description: No autorizado
    delete:
      summary: Eliminar usuario
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Usuario eliminado exitosamente
        404:
          description: Usuario no encontrado
        401:
          description: No autorizado

  /community:
    get:
      summary: Obtener nombres de todas las comunidades
      tags: [Community]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de comunidades
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
        401:
          description: No autorizado

  /dashboard:
    get:
      summary: Obtener datos del dashboard
      tags: [Dashboard]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Datos del dashboard
          content:
            application/json:
              schema:
                type: object
                properties:
                  last_logins:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        first_name:
                          type: string
                        last_name:
                          type: string
                        community:
                          type: string
                        rol:
                          type: string
                        last_login:
                          type: string
                          format: date-time
                  posts_month:
                    type: object
                    additionalProperties:
                      type: integer
                  posts_year:
                    type: object
                    additionalProperties:
                      type: integer
                  posts_per_month:
                    type: array
                    items:
                      type: integer
        401:
          description: No autorizado

  /posts_categories:
    get:
      summary: Obtener todas las categorías de posts
      tags: [PostsCategories]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de categorías de posts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
        401:
          description: No autorizado

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string

    UserInput:
      type: object
      required:
        - first_name
        - last_name
        - email
        - password
        - rol_id
        - community_id
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 50
        last_name:
          type: string
          minLength: 1
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        phone:
          type: string
          maxLength: 20
        rol_id:
          type: integer
        community_id:
          type: integer
        is_active:
          type: boolean
          default: true

    Post:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        status:
          type: string
          enum: [draft, published, pending_approval]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user_id:
          type: integer
        community_id:
          type: integer
        category_id:
          type: integer

    PostInput:
      type: object
      required:
        - title
        - content
        - category_id
      properties:
        title:
          type: string
        content:
          type: string
        category_id:
          type: integer
        community_id:
          type: integer
        status:
          type: string
          enum: [draft, published, pending_approval]
          default: pending_approval

    CommunityInfo:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        value:
          type: string

    CommunityInfoInput:
      type: object
      required:
        - title
        - value
      properties:
        title:
          type: string
          maxLength: 20
        value:
          type: string

    Testimony:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        comment:
          type: string
        community_id:
          type: integer

    TestimonyInput:
      type: object
      required:
        - name
        - comment
        - community_id
      properties:
        name:
          type: string
          maxLength: 20
        comment:
          type: string
          maxLength: 150
        community_id:
          type: integer
